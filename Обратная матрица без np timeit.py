import timeit
print('Возможные размеры матрицы: 3х3')
print('Введите количество строк исходной матрицы:')
n = int(input())
print('Введите данные исходной матрицы:')
A = []
for p in range(n):
    A.append(list(map(int, input().split())))
det = A[0][0]*A[1][1]*A[2][2]+A[0][1]*A[1][2]*A[2][0]+A[0][2]*A[1][0]*A[2][1]-A[0][2]*A[1][1]*A[2][0]-A[0][1]*A[1][0]*A[2][2]-A[0][0]*A[1][2]*A[2][1]
if det == 0:
    print('Детерминант равен нулю, обратной матрицы не существует.')
else:
    B = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    B[0][0] = A[1][1]*A[2][2]-A[1][2]*A[2][1]
    B[0][1] = -1*(A[1][0]*A[2][2]-A[1][2]*A[2][0])
    B[0][2] = A[1][0] * A[2][1] - A[1][1] * A[2][0]
    B[1][0] = -1 * (A[0][1] * A[2][2] - A[0][2] * A[2][1])
    B[1][1] = A[0][0] * A[2][2] - A[0][2] * A[2][0]
    B[1][2] = -1 * (A[0][0] * A[2][1] - A[0][1] * A[2][0])
    B[2][0] = A[0][1] * A[1][2] - A[0][2] * A[1][1]
    B[2][1] = -1 * (A[0][0] * A[1][2] - A[0][2] * A[1][0])
    B[2][2] = A[0][0] * A[1][1] - A[0][1] * A[1][0]
    B_T = [[B[j][i] for j in range(len(B))] for i in range(len(B[0]))]
    det1 = 1 / det
    C = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    C[0][0] = det1 * B_T[0][0]
    C[0][1] = det1 * B_T[0][1]
    C[0][2] = det1 * B_T[0][2]
    C[1][0] = det1 * B_T[1][0]
    C[1][1] = det1 * B_T[1][1]
    C[1][2] = det1 * B_T[1][2]
    C[2][0] = det1 * B_T[2][0]
    C[2][1] = det1 * B_T[2][1]
    C[2][2] = det1 * B_T[2][2]
    print('Обратная матрица:')
    print('[', C[0][0], C[0][1], C[0][2], ']')
    print('[', C[1][0], C[1][1], C[2][2], ']')
    print('[', C[2][0], C[2][1], C[2][2], ']')
print('Время выполнения программы:',timeit.timeit('output=10*5'))